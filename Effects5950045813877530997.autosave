

class Effects{
  private Ripple_Tachi ripples;
  private Color_Tachi colors;
  private Embolus_Tachi embs;
  private Tatoo tatoo;
  private MusicInfo2 minfo;
  
  final int MAX_ELEM_NUM = 80;
  
  public Effects(MusicInfo2 m){
    minfo = m;
    
    ripples = new Ripple_Tachi(MAX_ELEM_NUM);
    colors = new Color_Tachi(MAX_ELEM_NUM);
    embs = new Embolus_Tachi(MAX_ELEM_NUM);
    tatoo = new Tatoo(width/2, height/2, m);
  }
  public void render(float cur_time){
    update(cur_time);
    
    //tatoo.update(cur_time);
    ripples.update();
    embs.update();
    pianoRoll();
    colors.update();
  }
  
  private void update(float cur_time){
    minfo.resetTime(cur_time);
    int[] onsets = minfo.getCurOnset(0.05);
    //println(onsets.length);
    
    FloatList strens = minfo.getStrength(cur_time);
    for(int i=0; i<onsets.length; i+=1){
      int key_num = onsets[i];
      
      add_elem(strens.get(key_num), key_num);
    }
  }
  
  public void add_elem(float stren, int key_){
    ripples.add_ripple(stren, key_);
    colors.add_colors(stren, key_);
    embs.add_embs(stren, key_);
  }
  
  
  private void pianoRoll(){
    //52 white keys, lowest from A0.
    //Total 88 keys.
    pianoRoll(52);  
  }
  
  
  private void pianoRoll(int num){
    int[] interval = {4, 3}; // Period of printing black keys after N white keys.
    
    num -= 2;
    int period = 0;
    for(int e: interval) period += e;
   
    rectMode(CENTER);
    stroke(0);
    strokeWeight(1);
    int iter_ = 0;
    for(int i=0; i<=num; i+=1){
      fill(255);
      rect(init_width+w_size_x*i, init_height, w_size_x, w_size_y);
      
      int remain = i % period;
      for(int j=0; j<iter_; j+=1) remain -= interval[j];
      if(remain % interval[iter_] != 0){
        fill(0);
        rect(init_width-w_size_x/2+w_size_x*i+0.5, init_height-(w_size_y-b_size_y)/2+0.5, b_size_x, b_size_y);
      }
      else iter_ = (iter_+1) % interval.length;
    }
    
    fill(255);
    rect(init_width-w_size_x, init_height, w_size_x, w_size_y);
    fill(0);
    rect(init_width-w_size_x/2+0.5, init_height-(w_size_y-b_size_y)/2+0.5, b_size_x, b_size_y);
  }
}